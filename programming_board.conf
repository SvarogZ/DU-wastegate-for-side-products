{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-------------------------\n-- USER DEFINED DATA ----\n-------------------------\nlocal update_time = 1 --export\n\n-------------------------\n-- VARIABLES ------------\n-------------------------\nlocal is_all_slots_connected = false\nlocal hydrogen_level\nlocal oxygen_level\nlocal indicator_status = false\n\n-------------------------\n-- SLOTS ALLOCATION -----\n-------------------------\nlocal Screen = slot1\nlocal MainContainerHydrogen = slot2\nlocal ContainerHydrogen = slot3\nlocal HydrogenWasteGate = slot4\nlocal MainContainerOxygen = slot5\nlocal ContainerOxygen = slot6\nlocal OxygenWasteGate = slot7\n\n-------------------------\n-- AUXILIARY FUNCTIONS --\n-------------------------\nlocal function round(value, precision)\n\tif precision then return round(value / precision) * precision end\n\treturn value >= 0 and math.floor(value+0.5) or math.ceil(value-0.5)\nend\n\nlocal function printErrorMessage(text, screen)\n\tsystem.print(text)\n\tif screen and screen.setScriptInput then\n\t\tlocal data_to_send = {}\n\t\tdata_to_send.error = text\n\t\tscreen.setScriptInput(json.encode(data_to_send))\n\tend\nend\n\nlocal function getDataFromScreens(screen)\n\tif screen and screen.getScriptOutput then\n\t\tlocal data_from_screen = json.decode(screen.getScriptOutput())\n\t\thydrogen_level = data_from_screen[1]\n\t\toxygen_level = data_from_screen[2]\n\t\tif not hydrogen_level or not oxygen_level then\n\t\t\tprintErrorMessage(\"Levels from the screen are not received\", Screen)\n\t\t\treturn false\n\t\tend\n\t\treturn true\n\tend\n\treturn false\nend\n\n-------------------------\n-- CHECK SLOTS ----------\n-------------------------\nlocal function checkSlots()\n\t\n\tif is_all_slots_connected then\n\t\tif not MainContainerHydrogen or not MainContainerHydrogen.getItemsVolume or not MainContainerHydrogen.getItemsVolume()\n\t\t\tor not ContainerHydrogen or not ContainerHydrogen.getItemsVolume or not ContainerHydrogen.getItemsVolume()\n\t\t\tor not HydrogenWasteGate\n\t\t\tor not MainContainerOxygen or not MainContainerOxygen.getItemsVolume or not MainContainerOxygen.getItemsVolume()\n\t\t\tor not ContainerOxygen or not ContainerOxygen.getItemsVolume or not ContainerOxygen.getItemsVolume()\n\t\t\tor not OxygenWasteGate\n\t\t\tthen\n\t\t\tlocal text = \"No equipment detected! Check the distance to the equipment\"\n\t\t\tprintErrorMessage(text, Screen)\n\t\t\treturn false\n\t\tend\n\t\t\n\t\tif not hydrogen_level or not oxygen_level then\n\t\t\tif not getDataFromScreens(Screen) then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\t\n\t\treturn true\n\tend\n\t\n\tlocal function getSlotError(slot,slotClass,slotName)\n\t\tif not slot then\n\t\t\tlocal text = \"Connect \"..slotName..\" to the programming board.\"\n\t\t\tprintErrorMessage(text, Screen)\n\t\t\treturn false\n\t\tend\n\t\t\n\t\tif not slot.getElementClass or slot.getElementClass():lower() ~= slotClass then\n\t\t\tlocal text = \"Disconnect last element. This is not a \"..slotName..\".\"\n\t\t\tprintErrorMessage(text, Screen)\n\t\t\treturn false\n\t\tend\n\t\t\n\t\tsystem.print(slotName..\" connected.\")\n\t\treturn true\n\tend\n\t\n\tif getSlotError(Screen,'screenunit','Screen')\n\t\tand getSlotError(MainContainerHydrogen,'itemcontainer','Main container for Hydrogen')\n\t\tand getSlotError(ContainerHydrogen,'containersmallgroup','Wastegate Container for Hydrogen')\n\t\tand getSlotError(HydrogenWasteGate,'industryunit','TU for Hydrogen')\n\t\tand getSlotError(MainContainerOxygen,'itemcontainer','Main container for Oxygen')\n\t\tand getSlotError(ContainerOxygen,'containersmallgroup','Wastegate Container for Oxygen')\n\t\tand getSlotError(OxygenWasteGate,'industryunit','TU for Oxygen')\n\t\tthen\n\t\tis_all_slots_connected = true\n\t\t\n\t\tif not hydrogen_level or not oxygen_level then\n\t\t\tif not getDataFromScreens(Screen) then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\t\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\n-------------------------\n-- UPDATE FUNCTION ------\n-------------------------\nlocal function wasteGate(mainContainerSlot,wasteContainerSlot,transferSlot,level)\n\tif mainContainerSlot.getItemsVolume() > level then\t \n\t\tif wasteContainerSlot.getItemsVolume()/wasteContainerSlot.getMaxVolume() > 0.99 then\n\t\t\t--system.print(transferSlot.getStatus())\n\t\t\tif transferSlot.getStatus() == \"STOPPED\" then\n\t\t\t\t--system.print(\"start\")\n\t\t\t\ttransferSlot.start()\n\t\t\telse\n\t\t\t\t--system.print(\"hard stop\")\n\t\t\t\ttransferSlot.hardStop(1)\n\t\t\tend\n\t\tend\n\t\treturn 1 -- wastegate in operation\n\telseif transferSlot.getStatus() == \"STOPPED\" then\n\t\treturn 0 -- wastegate is stopping\n\telse\n\t\t--system.print(\"stop\")\n\t\ttransferSlot.hardStop(1)\n\t\treturn 2 -- wastegate is stopped\n\tend\nend\n\nfunction update()\n\tif not checkSlots() then\n\t\tunit.exit()\n\t\treturn\n\tend\n\t\n\tlocal data_to_send = {}\n\t\n\t\t\n\tlocal hydrogen_volume = MainContainerHydrogen.getItemsVolume()\n\tdata_to_send[1] = round(hydrogen_volume)\n\t\n\tlocal oxygen_volume = MainContainerOxygen.getItemsVolume()\n\tdata_to_send[2] = round(oxygen_volume)\n\t\n\tlocal hydrogen_status = wasteGate(MainContainerHydrogen,ContainerHydrogen,HydrogenWasteGate,hydrogen_level)\n\tdata_to_send[3] = hydrogen_status\n\t\n\tlocal oxygen_status = wasteGate(MainContainerOxygen,ContainerOxygen,OxygenWasteGate,oxygen_level)\n\tdata_to_send[4] = oxygen_status\n\n\tif indicator_status == true then indicator_status = false else indicator_status = true end\n\tdata_to_send[5] = indicator_status\n\t--system.print(indicator_status)  \n\n\tScreen.setScriptInput(json.encode(data_to_send))\nend\n\n-------------------------\n-- SCRIPT STOPPED ------\n-------------------------\nfunction stop()\n\tif is_all_slots_connected then\n\t\tprintErrorMessage(\"Script Stopped\", Screen)\n\tend\nend\n\n\n-------------------------\n-- CODE -----------------\n-------------------------\nunit.setTimer(\"update\", update_time)\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"-------------------------\n-- FILTER STOP ----------\n-------------------------\nstop()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"-------------------------\n-- FILTER UPDATE --------\n-------------------------\nupdate()\n\n\n\n","filter":{"args":[{"value":"update"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"}],"methods":[],"events":[]}
